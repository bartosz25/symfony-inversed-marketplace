<?php
namespace Catalogue\ImagesBundle\Controller;

use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Core\SecurityContext;
use Frontend\FrontBundle\Controller\FrontController;
use Symfony\Component\HttpKernel\Log\LoggerInterface;
use Others\Image;
use Others\Tools;
use Others\Pager;
use Frontend\FrontBundle\Helper\FrontendHelper;
use Catalogue\ImagesBundle\Entity\OffersImagesTmp;
use Catalogue\ImagesBundle\Entity\OffersImages;
use Catalogue\ImagesBundle\Form\AddImage;

class ImagesController extends FrontController
{

  /**
   * Add offer action.
   * @access public
   * @return Displayed template.
   */
  public function uploadTemporaryAction(Request $request)
  {
    if(!ctype_alnum($request->attributes->get('id')))
    {
       throw new Exception("[ImagesController] Bad temporary id format (not alphanumerical)");
       die();
    }
    $result = array();
    // check images quantity for this offer
    $count = $this->enMan->getRepository('CatalogueImagesBundle:OffersImagesTmp')->countUploaded($request->attributes->get('id'));
    if($count >= $this->config['images']['configuration']['offer']['maxImages'])
    {
      return $this->render('::frontend_ajax_error.html.php', array("text" => "Vous avez dépassé le nombre des images disponibles pour cette offre", "id" => "error".time(), "class" => "autoGenerated"));
    }
    $userAttr = $this->user->getAttributes();
    $logger = $this->get('logger');
    $frontendHelper = new FrontendHelper();
    // get last temporary name
    // $lastFile = $this->enMan->getRepository('CatalogueImagesBundle:OffersImagesTmp')->getLastFile();
    $letters = array('asdiqdkqs,ndilspqdsodqsp,cxwbvcxhazea%sdqze12339SJD943RKSQ95R089432+==1___23UJSNSCQESQ');
    $car = rand(0, (count($letters)-1));
    $randName = sha1(time().rand(1, 9999).$letters[$car]);
    $ext = $frontendHelper->getFileExtension($_FILES['imageField']['name'], 'jpg|gif|jpeg|png');
    $options = array('maxSize' => $this->config['images']['maxSize'], 'extensions' => $this->config['images']['extensions'], 
        'files' => array('imageField'),
        'required' => array(false),
        'isUploadify' => true,
        'names' => array($randName.'.'.$ext));
    $imgClass = new Image($options, $frontendHelper);
    if($imgClass->hasErrors == true) 
    {
      $values = array($this->config['images']['extensions'], Tools::convertSize('b', 'mb', $options['maxSize']).' mb');
      $result['message'] = $imgClass->errors[0]['type']; //str_replace($this->config['images']['variables'], $values, $this->config['images']['messages'][$imgClass->errors[0]['type']]);
      $result['isError'] = 1;
    }
    else
    {
      $fileOptions = array('directory' => $this->config['images']['offersTmpDir'],
      'alias' => $this->config['images']['configuration']['offer']['prefix'],
      'dimensions' => $this->config['images']['configuration']['offer']['dims'],
      'ratio' => $this->config['images']['configuration']['offer']['ratio'],
      'thumbs' => true);
      try
      {
        $imgClass->uploadFiles($fileOptions);
        $userRef = $this->enMan->getReference('User\ProfilesBundle\Entity\Users', (int)$userAttr['id']);
        $tmpEnt = new OffersImagesTmp();
        $tmpEnt->setData(array('tmpName' => $randName, 'tmpAuthor' => $userRef, 'tmpOffer' => $request->attributes->get('id'), 'tmpExt' => $ext, 
        'tmpSize' => $_FILES['imageField']['size'], 'tmpDate' => ''));
        $this->enMan->persist($tmpEnt);
        $this->enMan->flush();
        $result['isError'] = 0;
        $result['fileName'] = $randName.'.'.$tmpEnt->getTmpExt();
        return $this->render('CatalogueImagesBundle:Images:uploadTemporary.html.php', array('file' => $randName.'.'.$tmpEnt->getTmpExt(),
        'ticket' => $this->sessionTicket, 'dir' => $this->config['view']['dirs']['offersTmp'], 'id' => $tmpEnt->getIdOit(), 'route' => 'offersImagesDelTmp'));
      }
      catch(Exception $e)
      {
        $result['isError'] = 1;
        $result['message'] = $this->config['messages']['errorGeneral'];
        $logger->debug(sprintf('[IMGERROR] Error during image upload. Catched exception : %s', $e->getMessage()));
      }
    }
    if($result['isError'] == 1)
    {
      return $this->render('::frontend_ajax_error.html.php', array("text" => $result['message'], "id" => "error".time(), "class" => "autoGenerated"));
    }
  }

  /**
   * Uploads new images for an offer.
   * @access public
   * @return Template displayed at the page.
   */
  public function uploadNewImageAction(Request $request)
  {
    $id = (int)$request->attributes->get('id');
    $userAttrs = $this->user->getAttributes();
    $result = array('isError' => 1, 'message' => "Vous n'avez pas le droit d'exécuter cette action");
    $isTest = (int)$request->attributes->get('test');
    $testResult = (int)$request->attributes->get('result');
    if($isTest == 1 && $testResult == 0)
    {
      $userAttrs = array('id' => (int)$request->attributes->get('user'));
    }
    elseif($isTest == 1 && $testResult == 1)
    {
      $userAttrs = array('id' => (int)$request->attributes->get('elUser1'));
    }
    $offerData = $this->enMan->getRepository('CatalogueOffersBundle:Offers')->getOfferData($id, (int)$userAttrs['id']);
    if(isset($offerData['id_of']) && $offerData['id_of'] == $id)
    {
      // access tests case
      if($isTest == 1)
      {
        return new Response(parent::testAccess($testResult, 1), 200);
      }
      $images = $this->enMan->getRepository('CatalogueImagesBundle:OffersImages')->getImagesByOfferAndUser($id, $userAttrs['id']);
      $newName = 1;
      foreach($images as $image)
      {
        $part = explode('.', $image['imageName']);
        $newNameTmp = (int)$part[0] + 1;
        if($newNameTmp > $newName)
        {
          $newName = $newNameTmp;
        }
      }
      if(count($images) >= $this->config['images']['configuration']['offer']['maxImages'])
      {
        return $this->render('::frontend_ajax_error.html.php', array("text" => "Vous avez dépassé le nombre d'images pour cette offre", "id" => "error".time(), "class" => "autoGenerated"));
      }
      $frontendHelper = new FrontendHelper();
      $ext = $frontendHelper->getFileExtension($_FILES['imageField']['name'], 'jpg|gif|jpeg|png');
      $options = array('maxSize' => $this->config['images']['maxSize'], 'extensions' => $this->config['images']['extensions'], 
        'files' => array('imageField'),
        'required' => array(false),
        'isUploadify' => true,
        'names' => array($newName.'.'.$ext));
      $imgClass = new Image($options, $frontendHelper);
      if($imgClass->hasErrors == true) 
      {
        $values = array($this->config['images']['extensions'], Tools::convertSize('b', 'mb', $options['maxSize']).' mb');
        $result['message'] = $imgClass->errors[0]['type']; //str_replace($this->config['images']['variables'], $values, $this->config['images']['messages'][$imgClass->errors[0]['type']]);
        $result['isError'] = 1;
      }
      else
      {
        $fileOptions = array('directory' => $this->config['images']['offersDir'].$id.'/',
        'alias' => $this->config['images']['configuration']['offer']['prefix'],
        'dimensions' => $this->config['images']['configuration']['offer']['dims'],
        'ratio' => $this->config['images']['configuration']['offer']['ratio'],
        'thumbs' => true);
        try
        {
          $imgClass->uploadFiles($fileOptions);
          $offerRef = $this->enMan->getReference('Catalogue\OffersBundle\Entity\Offers', (int)$id);
          $oimEnt = new OffersImages();
          $oimEnt->setData(array('imageOffer' => $offerRef, 'imageName' => $newName.'.'.$ext, 'imageDate' => ''));
          $this->enMan->persist($oimEnt);
          $this->enMan->flush();
          $result['isError'] = 0;
          $result['fileName'] = $oimEnt->getImageName();
          return $this->render('CatalogueImagesBundle:Images:uploadTemporary.html.php', array('file' => $oimEnt->getImageName(),
          'ticket' => $this->sessionTicket, 'dir' => $this->config['view']['dirs']['offersImg'].$id, 'id' => $oimEnt->getIdOi(), 'route' => 'offersImagesDelete'));
        }
        catch(Exception $e)
        {
          $result['isError'] = 1;
          $result['message'] = $this->config['messages']['errorGeneral'];
          $logger->debug(sprintf('[IMGERROR] Error during image upload. Catched exception : %s', $e->getMessage()));
        }
      }
    }
    // access tests case
    if($isTest == 1)
    {
      return new Response(parent::testAccess($testResult, 0), 200);
    }
    if($result['isError'] == 1) 
    {
      return $this->render('::frontend_ajax_error.html.php', array("text" => $result['message'], "id" => "error".time(), "class" => "autoGenerated"));
    }
  }

  /**
   * Lists images for user (or for user by offer if paremeter id is bigger than 0).
   * @access public
   * @return Displayed template.
   */
  public function listAction(Request $request)
  {
    $userAttrs = $this->user->getAttributes();
    $id = (int)$request->attributes->get('id');
    $page = (int)$request->attributes->get('page');
    $isPartial = $this->checkIfPartial();
    $how = $request->attributes->get('how');
    $column = $request->attributes->get('column');
    if($id > 0)
    {
      $images = $this->enMan->getRepository('CatalogueImagesBundle:OffersImages')->getImagesByOffer($id, array('column' => $column, 'how' => $how,'dateFormat' => $this->config['sql']['dateFormat']));
      $all = $this->config['images']['configuration']['offer']['maxImages'];
    }
    else
    {
      $images = $this->enMan->getRepository('CatalogueImagesBundle:OffersImages')->getAllImages(array('column' => $column, 'how' => $how,'dateFormat' => $this->config['sql']['dateFormat'],
        'maxResults' => $this->config['pager']['perPage'],
        'start' => $this->config['pager']['perPage']*($page-1)
      ),$userAttrs['id']);
      $all = $this->enMan->getRepository('CatalogueOffersBundle:Offers')->sumAllImages($userAttrs['id']);
    }
	$pager = new Pager(array('before' => $this->config['pager']['before'],
	                 'after' => $this->config['pager']['after'], 'all' => $all,
					 'page' => $page, 'perPage' => $this->config['pager']['perPage']
				 ));
    $helper = new FrontendHelper;
    if($isPartial)
    {
      return $this->render('CatalogueImagesBundle:Images:userImagesTable.html.php', array('images' => $images, 'pager' => $pager->setPages(), 'page' => $page,
      'id' => $id, 'ticket' => $this->sessionTicket, 'class' => $helper->getClassesBySorter($how, $column, array('offre', 'date')), 'how' => $how, 'column' => $column));
    }
    return $this->render('CatalogueImagesBundle:Images:list.html.php', array('images' => $images, 'pager' => $pager->setPages(), 'id' => $id,
    'ticket' => $this->sessionTicket, 'class' => $helper->getClassesBySorter($how, $column, array('offre', 'date')), 'how' => $how, 'column' => $column));
  }

  /**
   * Adds new image to the offer.
   * @access public
   * @return Displayed template.
   */
  public function addAction(Request $request)
  {
    $id = (int)$request->attributes->get('id');
    $userAttr = $this->user->getAttributes();
    $flashSess = $request->getSession();
    $postData = $flashSess->getFlash('formData');
    $ofiEnt = new OffersImages();
    if(count($postData) > 0)
    {
      $ofiEnt->setData(array('imageOffer' => (int)$postData['imageOffer']));
    }
    // get all user offers
    $ofiEnt->setOffersList($this->enMan->getRepository('CatalogueOffersBundle:Offers')
      ->getOffersForImageAdd($this->config['images']['configuration']['offer']['maxImages'], (int)$userAttr['id'])
    );
    OffersImages::setSessionToken($this->sessionTicket);
    $ofiEnt->setTicket($this->sessionTicket);
    $formAdd = $this->createForm(new AddImage(), $ofiEnt);
    if($request->getMethod() == 'POST') 
    {
      $data = $request->request->all('AddImage'); 
      $frontendHelper = new FrontendHelper();
      // get last temporary name
      $lastFile = $this->enMan->getRepository('CatalogueImagesBundle:OffersImages')->getLastNameByOffer($data['AddImage']['imageOffer'], $userAttr['id']);
      $ext = $frontendHelper->getFileExtension($_FILES['imageName']['name'], 'jpg|gif|jpeg|png');
      $options = array('maxSize' => $this->config['images']['maxSize'], 'extensions' => $this->config['images']['extensions'], 
        'files' => array('imageName'),
        'required' => array(true),
        'isUploadify' => false,
        'names' => array(($lastFile+1).'.'.$ext));
      $imgClass = new Image($options, $frontendHelper);
      $formAdd->bindRequest($request);
      $offerRow = $this->enMan->getRepository('CatalogueOffersBundle:Offers')->getOfferData($data['AddImage']['imageOffer'], $userAttr['id']);
      if($formAdd->isValid() && !$imgClass->hasErrors && $offerRow['offerImages'] < $this->config['images']['configuration']['offer']['maxImages'] && isset($offerRow['id_of']))
      {
        // start SQL transaction
        $this->enMan->getConnection()->beginTransaction();
        try
        {
          $ofiEnt->setData(array('imageOffer' => $this->enMan->getReference('Catalogue\OffersBundle\Entity\Offers', (int)$data['AddImage']['imageOffer']),
          'imageName' => ($lastFile+1).'.'.$ext, 'imageDate' => ''));
          $this->enMan->persist($ofiEnt);
          $this->enMan->flush();

          // update number of offer images
          $this->enMan->createQueryBuilder()
          ->update('Catalogue\OffersBundle\Entity\Offers', 'o')
          ->set('o.offerImages', 'o.offerImages + 1')
          ->where('o.id_of = ?1')
          ->setParameter(1, (int)$data['AddImage']['imageOffer'])
          ->getQuery()
          ->execute();
          $this->enMan->getRepository('FrontendFrontBundle:Stats')->updateQuantity('+ 1', 'ofim');

          $fileOptions = array('directory' => $this->config['images']['offersDir'].'/'.(int)$data['AddImage']['imageOffer'].'/',
          'alias' => $this->config['images']['configuration']['offer']['prefix'],
          'dimensions' => $this->config['images']['configuration']['offer']['dims'],
          'ratio' => $this->config['images']['configuration']['offer']['ratio'],
          'thumbs' => true);
          $imgClass->uploadFiles($fileOptions);

          // commit SQL transaction
          $this->enMan->getConnection()->commit();
          $flashSess->setFlash('addSuccess', 1);
          return $this->redirect($this->generateUrl('offersImagesAdd', array('id' => 0)));
        }
        catch(Exception $e)
        {
          $this->enMan->getConnection()->rollback();
          $this->enMan->close();
          throw $e;
        }
      }
      else
      {
        $errors = (array)$this->getAllFormErrors($formAdd);
        $othersErrors = "";
        if($imgClass->hasErrors === true)
        {
          // append new errors
          $values = array(implode(', ', $this->config['images']['extensions']), Tools::convertSize('b', 'mb', $options['maxSize']).' mb');
          $othersErrors .= str_replace($this->config['images']['variables'], $values, $this->config['images']['messages'][$imgClass->errors[0]['type']]);
        }
        if(isset($offerRow['offerImages']) && $offerRow['offerImages'] >= $this->config['images']['configuration']['offer']['maxImages'])
        {
          $othersErrors .= "Le nombre maximale d'images pour une offre est dépassé";
        }
        if(!isset($offerRow['id_of']))
        {
          $othersErrors .= "Une erreur s'est produite";
        }
        $errors["imageName"] = $othersErrors;
        $flashSess->setFlash('formData', $data['AddImage']);//print_r(array_merge($errors, $othersErrors));die();
        $flashSess->setFlash('formErrors', $errors);
        return $this->redirect($this->generateUrl('offersImagesAdd', array('id' => 0)));
      }
    }
    return $this->render('CatalogueImagesBundle:Images:add.html.php', array('form' => $formAdd->createView(),
    'formErrors' => (array)$flashSess->getFlash('formErrors'), 'isSuccess' => (int)$flashSess->getFlash('addSuccess')));
  }

  /**
   * Deletes temporary image.
   * @access public
   * @return JSON message.
   */
  public function deleteTemporaryAction(Request $request)
  {
    $id = (int)$request->attributes->get('id');
    $userAttr = $this->user->getAttributes();
    $isTest = (int)$request->attributes->get('test');
    $testResult = (int)$request->attributes->get('result');
    $validCSRF = $this->validateCSRF();
    if($isTest == 1 && $testResult == 0)
    {
      $userAttr = array('id' => (int)$request->attributes->get('user'));
      $validCSRF = true;
    }
    elseif($isTest == 1 && $testResult == 1)
    {
      $userAttr = array('id' => (int)$request->attributes->get('elUser1'));
      $validCSRF = true;
    }
    $result = array('isError' => 1, 'message' => "");
    $image = $this->enMan->getRepository('CatalogueImagesBundle:OffersImagesTmp')->getByIdAndUser($id, $userAttr['id']);
    if($validCSRF === true && isset($image['id_oit']) && $image['id_oit'] == $id)
    {
      // access tests case
      if($isTest == 1)
      {
        return new Response(parent::testAccess($testResult, 1), 200);
      }
      // start SQL transaction
      $this->enMan->getConnection()->beginTransaction();
      try
      {
        $this->enMan->createQueryBuilder()->delete('Catalogue\ImagesBundle\Entity\OffersImagesTmp', 'oit')
        ->where('oit.id_oit = ?1')
        ->setParameter(1, $id)
        ->getQuery()
        ->execute();
        $fileName = $image['tmpName'].'.'.$image['tmpExt'];
        $dir = $this->config['images']['offersTmpDir'].'/'.$fileName.'/';
        foreach($this->config['images']['configuration']['offer']['prefix'] as $p => $prefix)
        {
          @unlink($dir.$prefix.$fileName);
        }
        @unlink($dir.$fileName);

        // commit SQL transaction
        $this->enMan->getConnection()->commit();

        $result['isError'] = 0;
        $result['message'] = "Le fichier a été correctement supprimé";
      }
      catch(Exception $e)
      {
        $this->enMan->getConnection()->rollback();
        $this->enMan->close();
        $result['message'] = "Une erreur s'est produite";
      }
    }
    else
    {
      // access tests case
      if($isTest == 1)
      {
        return new Response(parent::testAccess($testResult, 0), 200);
      }
      if(!$validCSRF) 
      {
        $result['message'] = "Votre session a expiré. Veuillez réessayer.";
      }
      else
      {
        $result['message'] = "Vous ne pouvez pas supprimer cette image.";
      }
    }
    echo json_encode($result);
    die();
  }


  /**
   * Deletes image from offer.
   * @access public
   * @return Displayed template.
   */
  public function deleteAction(Request $request)
  {
    $id = (int)$request->attributes->get('id');
    $userAttr = $this->user->getAttributes();
    $isTest = (int)$request->attributes->get('test');
    $testResult = (int)$request->attributes->get('result');
    $validCSRF = $this->validateCSRF();
    if($isTest == 1 && $testResult == 0)
    {
      $userAttr = array('id' => (int)$request->attributes->get('user'));
      $validCSRF = true;
    }
    elseif($isTest == 1 && $testResult == 1)
    {
      $userAttr = array('id' => (int)$request->attributes->get('elUser1'));
      $validCSRF = true;
    }
    $result = array('isError' => 1, 'message' => '');
    $image = $this->enMan->getRepository('CatalogueImagesBundle:OffersImages')->getImageByUserAndId($id, $userAttr['id']);
    if($validCSRF === true && isset($image['id_oi']) && $image['id_oi'] == $id)
    {
      // access tests case
      if($isTest == 1)
      {
        return new Response(parent::testAccess($testResult, 1), 200);
      }
      // start SQL transaction
      $this->enMan->getConnection()->beginTransaction();
      try
      {
        $this->enMan->createQueryBuilder()->delete('Catalogue\ImagesBundle\Entity\OffersImages', 'oi')
        ->where('oi.id_oi = ?1')
        ->setParameter(1, $id)
        ->getQuery()
        ->execute();
        $dir = $this->config['images']['offersDir'].'/'.$image['id_of'].'/';
        foreach($this->config['images']['configuration']['offer']['prefix'] as $p => $prefix)
        {
          @unlink($dir.$prefix.$image['imageName']);
        }
        @unlink($dir.$image['imageName']);
        // update number of offer images
        $this->enMan->createQueryBuilder()
        ->update('Catalogue\OffersBundle\Entity\Offers', 'o')
        ->set('o.offerImages', 'o.offerImages - 1')
        ->where('o.id_of = ?1')
        ->setParameter(1, (int)$image['id_of'])
        ->getQuery()
        ->execute();
        $this->enMan->getRepository('FrontendFrontBundle:Stats')->updateQuantity('- 1', 'ofim');

        // commit SQL transaction
        $this->enMan->getConnection()->commit();

        $result['isError'] = 0;
        $result['message'] = "Le fichier a été correctement supprimé";
      }
      catch(Exception $e)
      {
        $this->enMan->getConnection()->rollback();
        $this->enMan->close();
        $result['message'] = "Une erreur s'est produite";
      }
    }
    else
    {
      // access tests case
      if($isTest == 1)
      {
        return new Response(parent::testAccess($testResult, 0), 200);
      }
      if(!$validCSRF) $result['message'] = "Votre session a expiré. Veuillez réessayer.";
      else $result['message'] = "Une erreur s'est produite pendant la suppression du fichier";
    }
    echo json_encode($result);
    die();
  }

}